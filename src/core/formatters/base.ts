import { TokenCounter } from '../../services/tokenizer/types';
import { EMOJI_MAP } from '../../utils/constants';
import { SchemaStats } from '../types';
import { TokenCounterImpl } from '../../services/tokenizer/implementations';

export abstract class BaseFormatter {
  protected tokenCounter: TokenCounter;

  constructor() {
    this.tokenCounter = new TokenCounterImpl();
  }

  protected generateHeader(dbType: string, stats: SchemaStats): string {
    const tokens = this.tokenCounter.countTokens(JSON.stringify(stats));

    return `${EMOJI_MAP.database} Database Schema Analysis
Generated by Schiba on: ${new Date().toISOString()}

================================================================
${EMOJI_MAP.stats} Schema Summary
================================================================

Purpose:
--------
${EMOJI_MAP.info} This file contains a detailed representation of the database schema,
   optimized for AI analysis and context windows.

Schema Format:
-------------
${EMOJI_MAP.info} Content Organization:
   1. This summary section
   2. Database information
   3. Schema details:
      - Tables, columns, constraints, indexes, and more
      - Field types and relationships

Usage Guidelines:
----------------
${EMOJI_MAP.security} Security & Usage:
   - Schema is read-only
   - Sensitive information removed
   - All database objects included

Schema Metrics:
-------------
${EMOJI_MAP.stats} Statistics:
   - Database Type: ${dbType}
   - Total Size: ${(stats.totalSize / 1024).toFixed(2)} KB
   ${stats.details.tables ? `- Tables: ${stats.details.tables}` : ''}
   ${stats.details.columns ? `- Columns: ${stats.details.columns}` : ''}
   ${stats.details.indexes ? `- Indexes: ${stats.details.indexes}` : ''}
   ${stats.details.enums ? `- Enums: ${stats.details.enums}` : ''}

Token Analysis:
-------------
${EMOJI_MAP.token} AI Context Metrics:
   - Total Word Count: ~${Math.floor(stats.totalSize / 5)}
   - Claude Token Estimate: ${tokens.claude}
   - GPT-4 Token Estimate: ${tokens.gpt4}
   - GPT-3.5 Token Estimate: ${tokens.gpt35}
   - Regular Text Comparison: ~${Math.floor(stats.totalSize / 4)} tokens

${EMOJI_MAP.performance} Performance Note:
   This schema is optimized for AI analysis, using ~${Math.floor((tokens.claude / (stats.totalSize / 4)) * 100)}% 
   of the tokens that would be used by regular text format.

Additional Info:
---------------
${EMOJI_MAP.info} For more information: https://github.com/kennylwx/schiba

================================================================
Schema Details
================================================================
`;
  }

  abstract format(schema: string, stats: SchemaStats): string;
}
