import { configManager } from '../../config/manager';
import { logger } from '../../utils/logger';
import chalk from 'chalk';
import { InteractivePrompts } from '../interactive/prompts';

export interface AddOptions {
  ssl?: boolean;
  default?: boolean;
  description?: string;
  interactive?: boolean;
}

export async function addConnection(
  tag?: string,
  connectionString?: string,
  options: AddOptions = {}
): Promise<void> {
  try {
    // If no arguments provided, go into interactive mode
    if (!tag && !connectionString) {
      await addConnectionInteractive();
      return;
    }

    // Handle case where only connection string is provided (no tag)
    if (tag && !connectionString) {
      // Check if 'tag' is actually a connection string
      if (tag.includes('://')) {
        connectionString = tag;
        tag = undefined; // This will trigger auto-generation
      } else {
        showAddHelp(tag);
        throw new Error('Missing required argument: connection-string');
      }
    }

    if (!connectionString) {
      showAddHelp(tag);
      throw new Error('Missing required argument: connection-string');
    }

    // Use configManager.add which now handles unique tag generation
    const { finalTag, tagResult } = configManager.add(tag, connectionString, options);

    // Show user feedback for tag generation/resolution
    if (tagResult.wasAutoGenerated) {
      console.log(chalk.blue(`No tag provided. Auto-generated tag '${finalTag}'.`));
    } else if (tagResult.wasConflictResolved) {
      console.log(
        chalk.yellow(
          `‚ö†Ô∏è  Tag '${tagResult.originalTag}' already exists. Using '${finalTag}' instead.`
        )
      );
    }

    // Show helpful next steps
    if (configManager.list().length === 1) {
      console.log(chalk.dim('\nTip: Run "schiba fetch" to extract the schema'));
    }

    // Show additional context about the tag generation
    if (tagResult.wasAutoGenerated && !tagResult.wasConflictResolved) {
      console.log(
        chalk.dim(
          `\nFuture tip: You can specify a custom tag like: schiba add myapp "${connectionString}"`
        )
      );
    }
  } catch (error) {
    logger.error(`Failed to add connection: ${(error as Error).message}`);
    throw error;
  }
}

async function addConnectionInteractive(): Promise<void> {
  const prompts = new InteractivePrompts();

  try {
    // Collect connection details
    const details = await prompts.collectConnectionDetails();

    // Build connection string
    const connectionString = prompts.buildConnectionString(details);

    // Show summary and confirm
    const confirmed = await prompts.confirmConnection(details);

    if (!confirmed) {
      console.log(chalk.yellow('\nüëã Connection setup cancelled.'));
      return;
    }

    // Add the connection - use the configManager which handles unique tags
    const { finalTag, tagResult } = configManager.add(details.tag, connectionString, {
      default: details.setAsDefault,
      description: details.description,
    });

    // Show user feedback for tag changes
    if (tagResult.wasConflictResolved) {
      console.log(
        chalk.yellow(
          `‚ö†Ô∏è  Tag '${tagResult.originalTag}' already exists. Using '${finalTag}' instead.`
        )
      );
    }

    // Update SSL mode specifically (since configManager.add doesn't handle sslMode directly)
    if (details.sslMode !== 'prefer') {
      configManager.update(finalTag, 'ssl-mode', details.sslMode);
    }

    console.log(chalk.green(`\n‚úÖ Connection '${finalTag}' added successfully!`));

    // Show additional feedback for tag changes
    if (tagResult.wasConflictResolved) {
      console.log(
        chalk.dim(
          `   Note: Original tag '${tagResult.originalTag}' was taken, so '${finalTag}' was used instead.`
        )
      );
    }

    // Show next steps
    console.log(chalk.dim('\nüí° Next steps:'));
    console.log(chalk.dim(`   ‚Ä¢ Extract schema: ${chalk.cyan(`schiba fetch ${finalTag}`)}`));
    console.log(chalk.dim(`   ‚Ä¢ View connections: ${chalk.cyan('schiba list')}`));
    console.log(chalk.dim(`   ‚Ä¢ Test connection: ${chalk.cyan(`schiba test ${finalTag}`)}`));
    if (details.dbType === 'postgresql') {
      console.log(chalk.dim(`   ‚Ä¢ Configure schemas: ${chalk.cyan(`schiba schemas ${finalTag}`)}`));
    }
  } catch (error) {
    if (error instanceof Error && error.message.includes('User force closed')) {
      console.log(chalk.yellow('\nüëã Connection setup cancelled.'));
      return;
    }
    throw error;
  }
}

export function showAddHelp(tag?: string): void {
  console.log(chalk.yellow('\nAdd command usage:'));
  console.log(
    chalk.cyan('  schiba add                                    # Interactive mode (recommended)')
  );
  console.log(
    chalk.cyan(
      '  schiba add <connection-string>              # Auto-generate tag with Greek letters'
    )
  );
  console.log(chalk.cyan('  schiba add <tag> <connection-string> [options] # Specify custom tag'));

  if (!tag) {
    console.log(chalk.dim('\nAuto-generated tags follow Greek alphabet:'));
    console.log(chalk.dim('  - alpha, beta, gamma, delta, epsilon, zeta, eta, theta, etc.'));
    console.log(chalk.dim('  - If all Greek letters are used: alpha-1, beta-1, gamma-1, etc.'));

    console.log(chalk.dim('\nExample custom tags:'));
    console.log(chalk.dim('  - local, staging, production, dev, test'));
  }

  console.log(chalk.dim('\nConnection string formats (for direct mode):'));
  console.log(chalk.dim('  PostgreSQL: postgresql://user:pass@host:port/database'));
  console.log(chalk.dim('  MongoDB:    mongodb://user:pass@host:port/database'));

  console.log(chalk.dim('\nOptions (for custom tag mode):'));
  console.log(chalk.dim('  --no-ssl             Disable SSL connection'));
  console.log(chalk.dim('  --default            Set as default connection'));
  console.log(chalk.dim('  --description <text> Add a description'));

  console.log(chalk.dim('\nExamples:'));
  console.log(
    chalk.green('  schiba add                                           # Interactive setup')
  );
  console.log(
    chalk.dim(
      '  schiba add "postgresql://localhost:5432/mydb"        # Auto-generate tag (e.g., "alpha")'
    )
  );
  console.log(chalk.dim('  schiba add local "postgresql://localhost:5432/mydb" --no-ssl'));
  console.log(chalk.dim('  schiba add prod "postgresql://user:pass@host:5432/db" --default'));
  console.log(chalk.dim('  schiba add staging "mongodb://localhost:27017/mydb"'));

  console.log(
    chalk.dim(
      '\nNote: If a tag already exists, a number will be appended (e.g., "local-1", "local-2")'
    )
  );
  console.log(chalk.dim('      Interactive mode is recommended for first-time users.'));
  console.log(chalk.dim('      If your connection string contains special characters (like ?),'));
  console.log(chalk.dim('      wrap it in quotes to prevent shell interpretation.\n'));
}
