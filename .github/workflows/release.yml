name: Package & Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create a prerelease'
        required: false
        default: false
        type: boolean
      prerelease_id:
        description: 'Prerelease identifier (e.g., alpha, beta, rc)'
        required: false
        default: 'beta'
        type: string

# Single deployment workflow (manual trigger only)
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      new_tag: ${{ steps.version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install
          fi

      - name: Configure Git
        run: |
          git config user.name 'GitHub Action'
          git config user.email 'action@github.com'

      - name: Version bump and tag
        id: version
        run: |
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            if [ -n "${{ github.event.inputs.prerelease_id }}" ]; then
              pnpm version pre${{ github.event.inputs.version_type }} --preid=${{ github.event.inputs.prerelease_id }} --no-git-tag-version
            else
              pnpm version pre${{ github.event.inputs.version_type }} --no-git-tag-version
            fi
          else
            pnpm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          fi

          NEW_VERSION=$(node -p "require('./package.json').version")
          NEW_TAG="v${NEW_VERSION}"

          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

          echo "New version: ${NEW_VERSION}"
          echo "New tag: ${NEW_TAG}"

      - name: Update chocolatey nuspec version
        run: |
          sed -i "s/<version>.*<\/version>/<version>${{ steps.version.outputs.new_version }}<\/version>/" chocolatey/schiba.nuspec

      - name: Commit version change
        run: |
          git add package.json chocolatey/schiba.nuspec
          # Only add pnpm-lock.yaml if it exists and is not ignored
          if [ -f "pnpm-lock.yaml" ] && ! git check-ignore pnpm-lock.yaml > /dev/null 2>&1; then
            git add pnpm-lock.yaml
          fi
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"

      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin main
          git push origin ${{ steps.version.outputs.new_tag }}

  publish-npm:
    runs-on: ubuntu-latest
    needs: version-and-tag
    if: needs.version-and-tag.result == 'success'
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.version-and-tag.outputs.new_tag || github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install
          fi

      - name: Build
        run: pnpm build

      - name: Check if version already published
        id: check_version
        run: |
          VERSION="${{ needs.version-and-tag.outputs.new_version }}"

          if npm view schiba@$VERSION version 2>/dev/null; then
            echo "Version $VERSION already exists on NPM"
            echo "already_published=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION does not exist on NPM, proceeding with publish"
            echo "already_published=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish to NPM
        if: steps.check_version.outputs.already_published == 'false'
        run: |
          VERSION="${{ steps.check_version.outputs.version }}"
          if [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"rc"* ]]; then
            pnpm publish --tag next --no-git-checks
          else
            pnpm publish --no-git-checks
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish (already exists)
        if: steps.check_version.outputs.already_published == 'true'
        run: |
          echo "Skipping publish - version ${{ steps.check_version.outputs.version }} already exists on NPM"

  update-homebrew:
    needs: [version-and-tag, publish-npm]
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.publish-npm.result == 'success' && 
      !contains(needs.version-and-tag.outputs.new_version || '', 'alpha') && 
      !contains(needs.version-and-tag.outputs.new_version || '', 'beta') && 
      !contains(needs.version-and-tag.outputs.new_version || '', 'rc')
    environment: production
    steps:
      - name: Wait for NPM package
        run: sleep 60 # Wait for NPM to fully propagate

      - name: Checkout homebrew-tap
        uses: actions/checkout@v4
        with:
          repository: kennylwx/homebrew-tap
          token: ${{ secrets.GH_PAT }}

      - name: Get version
        id: get_version
        run: |
          echo "VERSION=${{ needs.version-and-tag.outputs.new_version }}" >> $GITHUB_OUTPUT

      - name: Get SHA256
        id: get_sha
        run: |
          curl -L "https://registry.npmjs.org/schiba/-/schiba-${{ steps.get_version.outputs.VERSION }}.tgz" -o package.tgz
          echo "SHA=$(shasum -a 256 package.tgz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Update formula
        run: |
          mkdir -p Formula
          cat > Formula/schiba.rb << 'EOF'
          require "language/node"

          class Schiba < Formula
            desc "Extract database schema in a compact format for AI chat context"
            homepage "https://github.com/kennylwx/schiba"
            url "https://registry.npmjs.org/schiba/-/schiba-${{ steps.get_version.outputs.VERSION }}.tgz"
            sha256 "${{ steps.get_sha.outputs.SHA }}"
            license "MIT"

            depends_on "node"

            def install
              system "npm", "install", *Language::Node.std_npm_install_args(libexec)
              bin.install_symlink Dir["#{libexec}/bin/*"]
            end

            test do
              assert_match version.to_s, shell_output("#{bin}/schiba --version")
            end
          end
          EOF

      - name: Commit and push
        run: |
          git config user.name 'GitHub Action'
          git config user.email 'action@github.com'
          git add Formula/schiba.rb
          git commit -m "schiba ${{ steps.get_version.outputs.VERSION }}"
          git push

  publish-chocolatey:
    needs: [version-and-tag, publish-npm]
    runs-on: windows-latest
    if: |
      always() && 
      needs.publish-npm.result == 'success' && 
      !contains(needs.version-and-tag.outputs.new_version || '', 'alpha') && 
      !contains(needs.version-and-tag.outputs.new_version || '', 'beta') && 
      !contains(needs.version-and-tag.outputs.new_version || '', 'rc')
    environment: production
    steps:
      - name: Wait for NPM package
        run: Start-Sleep -Seconds 60 # Wait for NPM to fully propagate

      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.version-and-tag.outputs.new_tag || github.ref }}

      - name: Get version
        id: get_version
        run: |
          echo "VERSION=${{ needs.version-and-tag.outputs.new_version }}" >> $env:GITHUB_OUTPUT

      - name: Update chocolatey nuspec version
        run: |
          (Get-Content chocolatey/schiba.nuspec) -replace '<version>.*</version>', '<version>${{ steps.get_version.outputs.VERSION }}</version>' | Set-Content chocolatey/schiba.nuspec

      - name: Pack chocolatey package
        run: |
          cd chocolatey
          choco pack

      - name: Push to Chocolatey
        run: |
          cd chocolatey
          choco push schiba.${{ steps.get_version.outputs.VERSION }}.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}
        continue-on-error: true # Don't fail the whole workflow if Chocolatey push fails
